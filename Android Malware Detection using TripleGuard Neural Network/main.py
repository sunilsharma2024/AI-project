from objective_function import obj_fun
from MGO_DADO import MGO_DAO
from classifer import *
import matplotlib
from MGO import *
from FFA import *
from POA import OriginalPOA
from TLO import OriginalTLO
# from data_gen import datagen
from plot_res import *
matplotlib.use('TkAgg', force=True)
from load_save import save,load

def full_analysis():
    # datagen()
    X_train = load('X_train')
    X_test = load('X_test')
    y_train = load('y_train')
    y_test = load('y_test')

    #Calculate the size of the problem space
    prob_size = X_train.shape[1]

    lb = (np.zeros([1, prob_size]).astype('int16')).tolist()
    ub = (np.ones([1, prob_size]).astype('int16')).tolist()
    problem_dict1 = {"fit_func": obj_fun,
                     "lb": lb,
                     "ub": ub,
                     "minmax": "min"}

    max_iter = 10
    pop_size = 10
    epoch=5
    Pro_best_solution,best_fitness =MGO_DAO(obj_fun, prob_size, pop_size, lb, ub, max_iter)
    save('Proposed_best_posi', Pro_best_solution)


    #MGO
    model = OriginalMGO(epoch, pop_size)
    best_position, best_fitness = model.solve(problem_dict1)
    save('MGO_best_posi', best_position)

    #FFA
    gamma = 0.001
    beta_base = 2
    alpha = 0.2
    alpha_damp = 0.99
    delta = 0.05
    exponent = 2
    model = OriginalFFA(epoch, pop_size, gamma, beta_base, alpha, alpha_damp, delta, exponent)
    best_position, best_fitness = model.solve(problem_dict1)
    save('best_sol_ffa',best_position)



    #POA
    model = OriginalPOA(epoch, pop_size)
    best_position, best_fitness = model.solve(problem_dict1)
    save('best_sol_poa', best_position)



    #TLO
    model = OriginalTLO(epoch, pop_size)
    best_position, best_fitness = model.solve(problem_dict1)
    save('best_sol_tlo', best_position)



    # PROPOSED
    ypre,met= EnsembleNet(X_train,y_train,X_test,y_test)
    save('proposed_met', met)
    print(met)


    # GRU[18]
    ypre,em =Gru(X_train, y_train, X_test, y_test)
    save('GRU_met', em)
    print(em)



    # GAN[19]
    ypre,em =GAN(X_train, y_train, X_test, y_test)
    save('GAN_met', em)
    print(em)
   # KNN_SVM_RF
    ypre,met =knn_svm_rf()
    save('knn_svm_rf_met',met)
    print(met)
    # SVM
    ypre, met = SVM()
    save('SVM_met', met)
    print(met)
    CNN
    ypre, em = CNN(X_train, y_train, X_test, y_test)
    print(em)

    #ANN
    ypre, em = ANN(X_train, y_train, X_test, y_test)
    print(em)


an=1
if an==1:

   full_analysis()



plot_res()
plot_res1()







