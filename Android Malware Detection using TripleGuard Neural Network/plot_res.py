import numpy as np
import pandas as pd
from load_save import *
import matplotlib.pyplot as plt
from tabulate import tabulate
import seaborn as sns
def bar_plot(label, value, metric):

    fig = plt.figure()
    colors = ['maroon', 'green', 'blue', 'orange', 'purple']

    # creating the bar plot
    plt.bar(label, value, color=colors,
            width=0.4)

    plt.xlabel("Method")
    plt.ylabel(metric)
    plt.savefig('./Results/'+metric+'.png', dpi=400)
    plt.show(block=False)


def plot_res():
    metrices1 = load('Metrices1')
    mthod = ['KNN_SVM_RF[17]', 'GRU[18]', 'GAN[19]', 'SVM', 'CNN', 'ANN', 'PROPOSED']
    metrices_plot = ['Accuracy', 'Precision', 'Sensitivity', 'Specificity', 'F-Measure', 'MCC', 'NPV', 'FPR', 'FNR']
    metrices1 = np.squeeze(metrices1, axis=0)
    # Bar plot
    for i in range(len(metrices_plot)):
        bar_plot(mthod, metrices1[i, :], metrices_plot[i])

    print('Metrices-Dataset')
    tab = pd.DataFrame(metrices1, index=metrices_plot, columns=mthod)
    excel_file_path = './Results/RESULT.xlsx'
    tab.to_excel(excel_file_path, index=metrices_plot)  # Specify index=False to exclude index column

    print(tabulate(tab, headers=mthod))



def bar_plot1(label, value, metric):

    fig = plt.figure()
    colors = ['maroon', 'green', 'blue', 'orange', 'purple']

    # creating the bar plot
    plt.bar(label, value, color=colors,
            width=0.4)

    plt.xlabel("Method")
    plt.ylabel(metric)
    plt.savefig('./Results/'+metric+'optimizer.png', dpi=400)
    plt.show(block=False)


def plot_res1():

    metrices2 = load('Metrices2')
    mthod1=['FFA','TLO','POA','MGO','Proposed']
    metrices_plot=['Accuracy', 'Precision', 'Sensitivity', 'Specificity', 'F-Measure', 'MCC', 'NPV', 'FPR', 'FNR']

    # Bar plot
    for i in range(len(metrices_plot)):
        bar_plot1(mthod1, metrices2[0][i, :], metrices_plot[i])

    print('Metrices-Dataset')
    tab = pd.DataFrame(metrices2[0], index=metrices_plot, columns=mthod1)
    excel_file_path = './Results/opti_RESULT.xlsx'
    tab.to_excel(excel_file_path, index=metrices_plot)  # Specify index=False to exclude index column

    print(tabulate(tab, headers=mthod1))
    # Load the dataset
    dataset = pd.read_csv("dataset/Android_Malware.csv")
    drop_columns = ['Unnamed: 0', 'Flow ID', ' Source IP', ' Source Port', ' Destination IP', ' Destination Port',
                    ' Protocol',
                    ' Timestamp', ' min_seg_size_forward', ' Fwd Header Length.1', ' Fwd Header Length',
                    ' Bwd Header Length']

    # Drop unnecessary columns
    dataset = dataset.drop(columns=drop_columns)
    # Calculate the correlation matrix
    correlation_matrix = dataset.corr()

    # Plot the heatmap
    plt.figure(figsize=(14, 8))
    sns.heatmap(correlation_matrix, cmap='coolwarm')
    plt.title('Correlation Heatmap for Android Malware Dataset')
    plt.xticks(rotation=45)
    plt.yticks(rotation=0)
    plt.tight_layout()
    plt.show()
    plt.savefig('./Results/heatmap.png', dpi=600)

#
# plot_res1()
# plot_res()