import tensorflow as tf
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.models import Model

class NBeatsNet:
    def __init__(self, input_shape, stack_types=['trend', 'seasonality'], num_blocks=[3, 3], num_layers=[4, 4], forecast_length=7):
        self.input_shape = input_shape
        self.stack_types = stack_types
        self.num_blocks = num_blocks
        self.num_layers = num_layers
        self.forecast_length = forecast_length
        self._construct_model()  # Call _construct_model in the constructor to initialize the model

    def _trend_block(self, x):
        # Trend block
        for _ in range(self.num_layers[0]):
            x = Dense(128, activation='relu')(x)
        return Dense(1)(x)

    def _seasonality_block(self, x):
        # Seasonality block
        for _ in range(self.num_layers[1]):
            x = Dense(128, activation='relu')(x)
        return Dense(self.forecast_length)(x)

    def _construct_model(self):
        inputs = Input(shape=self.input_shape)
        x = inputs

        for stack_type, num_block in zip(self.stack_types, self.num_blocks):
            for _ in range(num_block):
                if stack_type == 'trend':
                    x = self._trend_block(x)
                elif stack_type == 'seasonality':
                    x = self._seasonality_block(x)

        self.model = Model(inputs=inputs, outputs=x)
        self.model.compile(optimizer='adam', loss='mse')

    def fit(self, X, y, epochs=10, batch_size=32, validation_split=0.2):
        self.model.fit(X, y, epochs=epochs, batch_size=batch_size, validation_split=validation_split)

    def predict(self, X):
        return self.model.predict(X)
